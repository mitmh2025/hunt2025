import path from "path";
import url from "url";
import MiniCssExtractPlugin from "mini-css-extract-plugin";
import { WebpackManifestPlugin } from "webpack-manifest-plugin";
import nodeExternals from "webpack-node-externals";

const currentDirname = path.dirname(url.fileURLToPath(import.meta.url));
const outputDirname = path.join(currentDirname, "dist");
const outputManifestDirname = outputDirname;
const staticAssetOutputDirname = path.join(outputDirname, "static");

const jsManifestFilename = path.join(outputManifestDirname, "js-manifest.json");
const cssManifestFilename = path.join(
  outputManifestDirname,
  "css-manifest.json",
);
const assetManifestFilename = path.join(
  outputManifestDirname,
  "asset-manifest.json",
);
const workerManifestFilename = path.join(
  outputManifestDirname,
  "worker-manifest.json",
);

const ASSET_PATH = process.env.ASSET_PATH || "/static/";

// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used by mfng, if we add it back in
class LogValue {
  constructor(name, m) {
    this.name = name;
    this.m = m;
  }
  apply(compiler) {
    compiler.hooks.emit.tap("LogValue", () => {
      console.log(this.name, this.m);
    });
  }
}

/**
 * @param {unknown} _env
 * @param {{readonly mode?: import('webpack').Configuration['mode']}} argv
 * @return {import('webpack').Configuration[]}
 */
export default function createConfigs(_env, argv) {
  const { mode } = argv;
  const dev = mode === "development";

  const cssRule = {
    test: /\.css$/,
    use: [
      MiniCssExtractPlugin.loader,
      {
        loader: "css-loader",
        options: {
          modules: {
            localIdentName: dev
              ? "[local]__[hash:base64:5]"
              : "[hash:base64:7]",
            auto: true,
          },
        },
      },
      // TODO: {loader: "postcss-loader",},
    ],
  };

  const imageRule = (outputPathPrefix) => ({
    test: /\.(jpg|png|svg)$/,
    type: "asset/resource",
    generator: {
      outputPath: `${outputPathPrefix}`,
      publicPath: ASSET_PATH,
      filename: "[hash][ext][query]",
    },
  });

  const mp3Rule = (outputPathPrefix) => ({
    test: /\.mp3$/,
    type: "asset/resource",
    generator: {
      outputPath: `${outputPathPrefix}`,
      publicPath: ASSET_PATH,
      filename: "[hash][ext][query]",
    },
  });

  const opusRule = (outputPathPrefix) => ({
    test: /\.opus$/,
    type: "asset/resource",
    generator: {
      outputPath: `${outputPathPrefix}`,
      publicPath: ASSET_PATH,
      filename: "[hash][ext][query]",
    },
  });

  const fontRule = (outputPathPrefix) => ({
    test: /\.ttf$/,
    type: "asset/resource",
    generator: {
      outputPath: `${outputPathPrefix}`,
      publicPath: ASSET_PATH,
      filename: "[hash][ext][query]",
    },
  });

  const serverSwcLoader = {
    // .swcrc can be used to configure swc
    loader: "swc-loader",
  };

  const serverConfig = {
    name: "server",
    target: "node",
    // Server code imports JSON manifests that are generated by the client build,
    // so we need to run after the client build.
    dependencies: ["client"],
    entry: {
      server: "./src/main.ts",
    },
    output: {
      path: outputDirname,
      // If we hook assets up to a CDN:
      // publicPath: 'https://cdn.example.com/assets/[fullhash]/',
      filename: "[name]-bundle.js",
      publicPath: ASSET_PATH,
      libraryTarget: "module",
      chunkFormat: "module",
      devtoolModuleFilenameTemplate: (
        /** @type {{ absoluteResourcePath: string; }} */ info,
      ) => info.absoluteResourcePath,
    },
    module: {
      rules: [
        {
          // Work around bug in websocket-express
          test: /websocket-express/,
          resolve: { conditionNames: ["require"] },
        },
        {
          test: /\.m?[jt]sx?$/,
          use: serverSwcLoader,
        },
        cssRule,
        // TODO: support importing other kinds of assets, and aliases for
        // the results of the browser build bundles
        imageRule("static/"),
        mp3Rule("static/"),
        // Opus files should only be used by the radio and thus should never be
        // imported by browser entrypoints, only server entrypoints.
        opusRule("static/"),
        fontRule("static/"),
      ],
      // Add modules as appropriate
    },
    resolve: {
      extensions: [".ts", ".tsx", "..."],
      extensionAlias: {
        ".js": [".ts", ".js"],
        ".mjs": [".mts", ".mjs"],
      },
    },
    externalsPresets: { node: true },
    // FIXME: Requires conditions
    externals: (dev ? [nodeExternals({ importType: "module" })] : []).concat([
      "express",
      "websocket-express",
      "better-sqlite3",
      "pg-native",
      "knex",
      "swagger-ui-express",
      "redis",
    ]),
    plugins: [
      new MiniCssExtractPlugin({
        filename: "[contenthash].css",
        runtime: false,
      }),
    ],
    experiments: {
      outputModule: true,
      layers: true,
    },
    devtool: dev ? "source-map" : "source-map",
    mode,
    stats: {
      errorDetails: true,
      // TODO: stats
    },
  };

  const clientConfig = {
    name: "client",
    entry: {
      background_check: "./src/frontend/rounds/background_check/client.tsx",
      dev: "./src/frontend/client/dev.tsx",
      illegal_search: "./src/frontend/rounds/illegal_search/client.tsx",
      main: "./src/frontend/client/main.tsx",
      navbar: "./src/frontend/client/navbar.tsx",
      paper_trail: "./src/frontend/rounds/paper_trail/client.tsx",
      puzzle: "./src/frontend/client/puzzle.tsx",
      shadow_diamond: "./src/frontend/rounds/shadow_diamond/client.tsx",
      stakeout: "./src/frontend/rounds/stakeout/client.tsx",
    },
    // Client code needs to reference the webworker bundle by URL.
    dependencies: ["worker"],
    target: "web",
    output: {
      filename: dev ? "[name].[contenthash:16].js" : "[contenthash:16].js",
      path: staticAssetOutputDirname,
      publicPath: ASSET_PATH,
    },
    devtool: "source-map",
    module: {
      rules: [
        {
          test: /\.m?tsx?$/,
          exclude: /(node_modules)/,
          use: ["swc-loader"],
        },
        cssRule,
        imageRule(""),
        mp3Rule(""),
        fontRule(""),
      ],
    },
    resolve: {
      extensions: [".ts", ".tsx", "..."],
      extensionAlias: {
        ".js": [".ts", ".js"],
        ".mjs": [".mts", ".mjs"],
      },
      modules: [path.join(currentDirname, "node_modules")],
    },
    optimization: {
      runtimeChunk: "single",
      splitChunks: {
        chunks: "all",
      },
    },
    plugins: [
      new MiniCssExtractPlugin({
        filename: dev ? "[name].[contenthash:16].css" : "[contenthash:16].css",
        runtime: false,
      }),
      new WebpackManifestPlugin({
        fileName: cssManifestFilename,
        publicPath: ASSET_PATH,
        filter: (file) => file.path.endsWith(".css"),
      }),
      new WebpackManifestPlugin({
        fileName: path.join(
          outputManifestDirname,
          "js-manifest-with-chunks.json",
        ),
        generate: (seed, files) => {
          // Walk over the universe of output files, and collect and dedupe the
          // universe of entrypoints known to any of them
          const entrypoints = new Set();
          files.forEach((file) => {
            file.chunk?._groups?.forEach((group) => {
              entrypoints.add(group);
            });
          });
          const entries = [...entrypoints];

          // For each named entrypoint, collect the files referenced by the
          // chunks needed by that entrypoint.
          const acc = {};
          entries.forEach((entry) => {
            const name = entry.options?.name ?? entry.runtimeChunk?.name;
            let files = [];
            entry.chunks.forEach((chunk) => {
              files = [...files, ...chunk.files];
            });
            acc[name] = files.map((file) => `${ASSET_PATH}${file}`);
          });
          return acc;
        },
      }),
      new WebpackManifestPlugin({
        fileName: jsManifestFilename,
        publicPath: ASSET_PATH,
        filter: (file) => file.path.endsWith(".js"),
      }),
      new WebpackManifestPlugin({
        fileName: assetManifestFilename,
        publicPath: ASSET_PATH,
        filter: (file) =>
          !file.path.endsWith(".js") && !file.path.endsWith(".css"),
      }),
    ],
    experiments: {
      outputModule: true,
      layers: true,
    },
    // ...
  };

  const workerConfig = {
    name: "worker",
    entry: {
      websocket_worker: "./worker/SharedWebsocketWorker.ts",
    },
    target: "webworker",
    output: {
      filename: dev ? "[name].[contenthash:16].js" : "[contenthash:16].js",
      path: staticAssetOutputDirname,
      publicPath: ASSET_PATH,
    },
    module: {
      rules: [
        {
          test: /\.m?tsx?$/,
          exclude: /(node_modules)/,
          use: ["swc-loader"],
        },
      ],
    },
    resolve: {
      extensions: [".ts", ".tsx", "..."],
      extensionAlias: {
        ".js": [".ts", ".js"],
        ".mjs": [".mts", ".mjs"],
      },
      //modules: [path.join(currentDirname, "node_modules")],
    },
    plugins: [
      new WebpackManifestPlugin({
        fileName: workerManifestFilename,
        publicPath: ASSET_PATH,
      }),
    ],
  };

  return [workerConfig, clientConfig, serverConfig];
}
