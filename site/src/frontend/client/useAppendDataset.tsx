import { useState, useEffect } from "react";
import {
  type DatasetParams,
  type Dataset,
  type ObjectWithId,
} from "../../../lib/api/websocket";
import archiveMode from "../utils/archiveMode";
import clientIsBot from "../utils/clientIsBot";
import globalDatasetManager from "@hunt_client/globalDatasetManager";

function useAppendDataset<T extends ObjectWithId>(
  dataset: Dataset,
  params: DatasetParams,
  initialValue: T[],
): T[] {
  // When the site is running in production mode, we want to use the
  // `initialValue` that's generated by the server-side render, because that
  // enables hydration of local state that matches the server-rendered content.
  //
  // In archive mode, the default serverside render (which populates
  // `initialValue`) includes a dataset simulating the end of the hunt (i.e. all
  // puzzles are unlocked, etc.). If our client is a standard browser and is
  // running the archive mode client-side unlock implementation, we want to
  // avoid flashing that complete dataset, so we treat the empty list as the
  // initial value.
  //
  // However, if we are (a) in archive mode and (b) we think the client is a
  // bot, use the (complete) server-side rendered value and don't live-update
  // it, because we want search indexes to have (e.g.) the full activity log and
  // list of puzzles.

  const [state, setState] = useState<T[]>(() =>
    archiveMode && !clientIsBot ? [] : [...initialValue],
  );
  useEffect(() => {
    if (archiveMode && clientIsBot) {
      return;
    }

    const stop = globalDatasetManager.watch(
      dataset,
      params,
      state,
      (value: object) => {
        setState((prevState: T[]) => {
          // Append if not already known
          if (
            prevState.findIndex((entry) => entry.id === (value as T).id) === -1
          ) {
            const newState = [...prevState, value as T];
            return newState;
          } else {
            return prevState;
          }
        });
      },
    );
    return stop;
    // eslint-disable-next-line react-hooks/exhaustive-deps -- We explicitly exclude `state` from the dependency set since we don't want to re-establish the watch on every update.
  }, [dataset, JSON.stringify(params)]);
  return state;
}

export default useAppendDataset;
